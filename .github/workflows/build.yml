name: 'build'

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0/2 * * *'

jobs:

  schedule:
    runs-on: windows-latest

    outputs:
      build-plan: ${{ steps.check.outputs.build-plan }}

    steps:

    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install deps
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: 1
      run: |
        python -m pip install --user 'wheel==0.36.2'
        python -m pip install --user -r requirements.txt

    - name: Check what we should run
      id: check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python autobuild.py write-build-plan build_plan.json
        $buildPlan = Get-Content build_plan.json -Raw
        echo "::set-output name=build-plan::$buildPlan"

    - name: Clean up assets
      if: steps.check.outputs.build-plan != '[]'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python autobuild.py clean-assets

    - name: Show build queue
      if: steps.check.outputs.build-plan != '[]'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python autobuild.py show

  build:
    needs: schedule
    runs-on: windows-latest

    if: ${{ needs.schedule.outputs.build-plan != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.schedule.outputs.build-plan) }}
    name: ${{ matrix.name }}

    steps:

    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install deps
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: 1
      run: |
        python -m pip install --user 'wheel==0.36.2'
        python -m pip install --user -r requirements.txt

    - uses: msys2/setup-msys2@v2
      with:
        msystem: MSYS
        update: true
        install: msys2-devel base-devel mingw-w64-x86_64-toolchain mingw-w64-i686-toolchain git

    - name: Switch to the main mirror
      shell: msys2 {0}
      run: |
        sed -e "s|Include = /etc/pacman.d/mirrorlist.mingw32|Server = http://repo.msys2.org/mingw/i686/|g" -i /etc/pacman.conf
        sed -e "s|Include = /etc/pacman.d/mirrorlist.mingw64|Server = http://repo.msys2.org/mingw/x86_64/|g" -i /etc/pacman.conf
        sed -e "s|Include = /etc/pacman.d/mirrorlist.msys|Server = http://repo.msys2.org/msys/\$arch/|g" -i /etc/pacman.conf
        pacman-conf.exe

    - name: Update using the main mirror & Check install
      run: |
        msys2 -c 'pacman --noconfirm -Suuy'
        msys2 -c 'pacman --noconfirm -Suu'
        msys2 -c 'pacman -Qkq'

    - name: Init git
      shell: msys2 {0}
      run: |
        git config --global user.email 'ci@msys2.org'
        git config --global user.name 'MSYS2 Continuous Integration'

    - name: Process build queue
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $env:PACKAGER='CI (msys2-autobuild/' + $env:GITHUB_SHA.Substring(0, 8) + '/' + $env:GITHUB_RUN_ID + ')'
        $BUILD_ROOT='C:\_'
        $MSYS2_ROOT=(msys2 -c 'cygpath -w /')
        Get-PSDrive -PSProvider FileSystem
        python autobuild.py build "$MSYS2_ROOT" "$BUILD_ROOT"
